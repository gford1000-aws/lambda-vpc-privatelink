{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates an API Gateway callers to POST data, which is logged in CloudWatch logs after passing via a Custom VPC",
    "Parameters" : {
        "APIName" : {
            "Default" : "PostMessage",
            "Description" : "The name of the API",
            "Type" : "String"
        },
        "APIDescription" : {
            "Default" : "Allows data to be POSTed to AWS CloudWatch",
            "Description" : "Description of the API",
            "Type" : "String"
        },
        "StageName" : {
            "Default" : "beta",
            "Description" : "The name for the API stage",
            "Type" : "String"
        },
        "LoggingTTL" : {
            "Default" : 7,
            "Description" : "The TTL in days for the logs generated by the Lambda function",
            "Type" : "Number",
            "AllowedValues" : [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
        }
	},
	"Resources" : {
        "RestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": { "Ref" : "APIName" },
                "Description" : { "Ref" : "APIDescription" }
            }
        },    
        "ResourceName": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref" : "RestApi" },
                "ParentId": { "Fn::GetAtt" : [ "RestApi", "RootResourceId" ] },
                "PathPart": "publish"
            }
        },
        "ResourceMethod": {
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": [ "LogLambdaAliasForAPI" ],
            "Properties": {
                "AuthorizationType" : "NONE",
                "HttpMethod" : "POST",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": { 
                        "Fn::Join" : [ "", 
                            [
                                "arn:aws:apigateway:", 
                                { "Ref" : "AWS::Region" }, 
                                ":lambda:path/2015-03-31/functions/", 
                                { "Ref" : "LogLambdaAliasForAPI" }, 
                                "/invocations"
                            ]
                        ] 
                    }
                },
                "ResourceId" : { "Ref" : "ResourceName" },
                "RestApiId" : { "Ref" : "RestApi" }
            }
        },
        "RestApiStage": {
            "Type": "AWS::ApiGateway::Stage",
            "DependsOn": [ "ResourceMethod" ],
            "Properties": {
                "DeploymentId": { "Ref" : "RestApiDeployment" },
                "RestApiId": { "Ref" : "RestApi" },
                "StageName": { "Ref" : "StageName" },
                "TracingEnabled": true
            }
        },    
        "RestApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [ "ResourceMethod" ],
            "Properties": {
                "RestApiId": { "Ref" : "RestApi" }
            }
        },    
        "LogLambda" : {
            "Type": "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join": [
                            "\n",
                            [
                                "from json import dumps",
                                "",
                                "def process(event):",
                                "    # Processing goes here, returning status code of processing as well as result",
                                "    # Here just log the event and return",
                                "    print(event)",
                                "    return (200, '')",
                                "",
                                "def lambda_handler(event, context):",
                                "    # Wrapper code to catch unexpected errors",
                                "    try:",
                                "       response = process(event)",
                                "       return { \"statusCode\" : response[0], \"headers\" : {}, \"body\": dumps(response[1]) }",
                                "    except Exception as e:",
                                "       return { \"statusCode\" : 500, \"headers\" : {}, \"body\": \"Internal error: {}\".format(e) }",
                                ""
                            ]
                        ]
                    }
                },
                "Description" : "Lambda logs to CloudWatch via a VPC Endpoint in a Custom VPC",
                "Handler" : "index.lambda_handler",
                "MemorySize" : 128,
                "Role" : { "Fn::GetAtt": [ "LogLambdaRole", "Arn" ] },
                "Runtime" : "python2.7",
                "Timeout" : 5,
                "VpcConfig" : {
                    "SecurityGroupIds" : [ { "Ref" : "LambdaSecurityGroup" }],
                    "SubnetIds" : { 
                        "Fn::Split" : [ ",", 
                            {
                                "Fn::Sub" : [ 
                                    "${Subnet1},${Subnet2}", 
                                    {
                                        "Subnet1" : { "Ref" : "PrivateSubnet1" },
                                        "Subnet2" : { "Ref" : "PrivateSubnet2" }
                                    } 
                                ]
                            }
                        ] 
                    }
                }
            }
        },
        "LogLambdaVersion" : {
            "Type" : "AWS::Lambda::Version",
            "Properties" : {
                "FunctionName" : { "Ref" : "LogLambda" },
                "Description" : "This version of the Lambda function"
            }
        },
        "LogLambdaAliasForAPI" : {
            "Type" : "AWS::Lambda::Alias",
            "Properties" : {
                "FunctionName" : { "Ref" : "LogLambda" },
                "FunctionVersion" : { "Fn::GetAtt" : [ "LogLambdaVersion", "Version" ] },
                "Name" : "LambdaVersionForBetaAPI"
            }
        },
        "LogLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LoggingLambdaActivity",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "VPCAccess",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                  "Effect":"Allow",
                                  "Action":[ 
                                    "ec2:CreateNetworkInterface",
                                    "ec2:DescribeNetworkInterfaces",
                                    "ec2:DeleteNetworkInterface"
                                  ],
                                  "Resource": [ 
                                    "*"
                                  ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaLogGroup" : {
            "Type" : "AWS::Logs::LogGroup",
            "Properties" : {
                "LogGroupName" : {
                    "Fn::Sub" : [ "/aws/lambda/${LambdaName}", { "LambdaName" : { "Ref" : "LogLambda" } } ]
                },
                "RetentionInDays" : { "Ref" : "LoggingTTL" }
            }
        },
        "APIResourceLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Ref" : "LogLambdaAliasForAPI" },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [ "",
                        [
                            "arn:aws:execute-api:",
                            { "Ref" : "AWS::Region" },
                            ":",
                            { "Ref" : "AWS::AccountId" },
                            ":",
                            { "Ref" : "RestApi" },
                            "/*/*"
                        ]
                    ]
                }
            }
        },    
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true,
                "InstanceTenancy": "default"
            }
        },
        "PrivateSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
                "CidrBlock": "10.0.0.0/20",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PrivateSubnetRouteTable" },
                "SubnetId": { "Ref": "PrivateSubnet1" }
            }
        },
        "PrivateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
                "CidrBlock": "10.0.32.0/20",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "PrivateSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": { "Ref": "PrivateSubnetRouteTable" },
                "SubnetId": { "Ref": "PrivateSubnet2" }
            }
        },
        "LambdaSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Security Group for Lambda Egress",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupEgress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : 443,
                        "ToPort" : 443,
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "CloudWatchVPCEndPoint" : {
            "Type" : "AWS::EC2::VPCEndpoint",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "ServiceName" : { "Fn::Join" : [ "", [ "com.amazonaws.", { "Ref": "AWS::Region" }, ".logs" ] ] },
                "PolicyDocument" : {
                    "Version":"2012-10-17",
                    "Statement": [ {
                        "Effect" : "Allow",
                        "Principal" : "*",
                        "Action" : "logs.PutLogEvents",
                        "Resource" : "*"
                    } ]
                },
                "VpcEndpointType" : "Interface",
                "PrivateDnsEnabled" : true,
                "SubnetIds" : [ { "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" } ],
                "SecurityGroupIds" : [ { "Ref" : "CloudWatchVPCEndPointSecurityGroup" } ]
            }
        },
        "CloudWatchVPCEndPointSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription" : "Security Group for VPC Endpoint to CloudWatch",
                "VpcId" : { "Ref" : "VPC" },
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : 443,
                        "ToPort" : 443,
                        "SourceSecurityGroupId" : { "Ref" : "LambdaSecurityGroup" }
                    }
                ]
            }
        }
    },
    "Outputs" : {
        "URL" : {
            "Description" : "The URL to the deployed stage",
            "Value" : {
                "Fn::Join" : [ "",
                    [
                        "https://",
                        { "Ref" : "RestApi" },
                        ".execute-api.",
                        { "Ref" : "AWS::Region" },
                        ".amazonaws.com/", 
                        { "Ref" : "StageName" }
                    ]
                ]
            }
        }
    }
}
